# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
orbs:
  jq: circleci/jq@2.2.0
  
commands:
  check-code-quality:
    description: Check Code Quality
    parameters:
        sonar_server_url:
            type: string
            description: "URL of your SonarQube server. e.g.: http://my.sonarqube,server:9000"
            default: "$SONAR_SERVER"
        sonar_login:
            description: "Authentication key (sonar.login paramter) to access SonarQube and perform analysis"
            type: string
            default: "$SONAR_TOKEN"
        sonar_projectKey:
            description: "Sonar Project Key"
            type: string
            default: "$SONAR_PROJECYKEY"            
        sonar_sources:
            description: "Where the files are located?"
            type: string
            default: "$SONAR_SOURCES"
    steps:
    - run:
        name: Install Sonarqube scanner
        command: |
            wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.2.0.1873.zip
            unzip sonar-scanner-cli-4.2.0.1873.zip

    - run:
        name: Run Sonarscanner
        command: |
            export SONAR_SCANNER_OPTS="-Xmx2048m"
            eval ./sonar-scanner-4.2.0.1873/bin/sonar-scanner -Dsonar.host.url=<< parameters.sonar_server_url >> \
            -Dsonar.sources=<< parameters.sonar_sources >> \
            -Dsonar.projectKey=<< parameters.sonar_projectKey >> \
            -Dsonar.login=<< parameters.sonar_login >>
            url="http://rocasinc.com:9000/api/measures/component?metricKeys=violations&component=HelloWorld"            
            vul=$(curl -sX GET -u squ_99b453521d8104875d4e478ec486a7e14a44daa4: ${url})
            no_vul=$(echo ${vul} | jq -r .component.measures | jq -r .[0].value)
            
            if [ "${no_vul}" != "0" ]; then
                echo "SonarQube problems: There are ${no_vul} violations"
                exit 1
            fi
#           

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  say-hello:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: sonarsource/sonar-scanner-cli
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - jq/install
      - checkout
      - check-code-quality:
            sonar_server_url: 'http://rocasinc.com:9000'
            sonar_login: 'squ_99b453521d8104875d4e478ec486a7e14a44daa4'
            sonar_projectKey: 'HelloWorld'
            sonar_sources: './HelloWorld'
        
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  say-hello-workflow:
    jobs:
      - say-hello


